// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: recepient.sql

package db

import (
	"context"
)

const createRecepient = `-- name: CreateRecepient :one
INSERT INTO recepient (email, status) 
VALUES (?, ?)
RETURNING id, email, status
`

type CreateRecepientParams struct {
	Email  string
	Status string
}

func (q *Queries) CreateRecepient(ctx context.Context, arg CreateRecepientParams) (Recepient, error) {
	row := q.db.QueryRowContext(ctx, createRecepient, arg.Email, arg.Status)
	var i Recepient
	err := row.Scan(&i.ID, &i.Email, &i.Status)
	return i, err
}

const deleteRecepient = `-- name: DeleteRecepient :exec
DELETE FROM recepient
WHERE id = ?
`

func (q *Queries) DeleteRecepient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecepient, id)
	return err
}

const getRecepient = `-- name: GetRecepient :one
SELECT id, email, status FROM recepient
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRecepient(ctx context.Context, id int64) (Recepient, error) {
	row := q.db.QueryRowContext(ctx, getRecepient, id)
	var i Recepient
	err := row.Scan(&i.ID, &i.Email, &i.Status)
	return i, err
}

const listRecepients = `-- name: ListRecepients :many
SELECT id, email, status FROM recepient
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListRecepientsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListRecepients(ctx context.Context, arg ListRecepientsParams) ([]Recepient, error) {
	rows, err := q.db.QueryContext(ctx, listRecepients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recepient
	for rows.Next() {
		var i Recepient
		if err := rows.Scan(&i.ID, &i.Email, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
